export const passwordGenerator = (options) => {
  // This method should not be used to create safe/permament passwords for users
  // Passwords should be generated by browsers or password managers
  // Only justifiable use-case is creating temporary passwords valid until first login
  const uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  const lowercase = uppercase.toLowerCase();
  const numbers = "0123456789";
  const specialCharacters = "!@#$%^&*()_+-=[]{}|;:,.<>?";
  const length = options?.length ?? 12;
  const isNumberRequired = options?.isNumberRequired ?? true;
  const isLowerCaseRequired = options?.isLowerCaseRequired ?? true;
  const isUpperCaseRequired = options?.isUpperCaseRequired ?? true;
  const isSpecialSymbolRequired = options?.isSpecialSymbolRequired ?? true;

  let password = "";

  const getCategoriesArray = () => {
    const availableCategories = [];
    if (isLowerCaseRequired) availableCategories.push(lowercase);
    if (isUpperCaseRequired) availableCategories.push(uppercase);
    if (isNumberRequired) availableCategories.push(numbers);
    if (isSpecialSymbolRequired) availableCategories.push(specialCharacters);
    return availableCategories;
  };

  const categoriesArray = getCategoriesArray();

  categoriesArray.forEach((category) => {
    password += getRandomOfType(category);
  });

  for (let i = categoriesArray.length; i < length; i++) {
    const randomCategory = categoriesArray[getSafeRandomNumberArray(1, categoriesArray.length)];
    password += getRandomOfType(randomCategory);
  }

  password = shuffle(password);

  return password;
};

function shuffle(str) {
  return str.split('').sort(() => getSafeRandomNumberArray(1, 3) - 0.5).join('');
}

function getRandomOfType(charset) {
  return charset.charAt(getSafeRandomNumberArray(1, charset.length));
}

function getSafeRandomNumberArray(length, modulo) {
  // crypto.getRandomValues is coded in a way that is cryptographically secure
  // do not use Math.Random to generate password
  const seedArray = self.crypto.getRandomValues(new Uint32Array(length));
  return Array.from(seedArray, (value) => value % modulo);
}
